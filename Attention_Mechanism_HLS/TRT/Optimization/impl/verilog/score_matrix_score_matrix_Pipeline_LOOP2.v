// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module score_matrix_score_matrix_Pipeline_LOOP2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        score_m_0_address0,
        score_m_0_ce0,
        score_m_0_we0,
        score_m_0_d0,
        keys_t_0_address0,
        keys_t_0_ce0,
        keys_t_0_q0,
        empty_4,
        keys_t_1_address0,
        keys_t_1_ce0,
        keys_t_1_q0,
        empty_5,
        keys_t_2_address0,
        keys_t_2_ce0,
        keys_t_2_q0,
        empty_6,
        keys_t_3_address0,
        keys_t_3_ce0,
        keys_t_3_q0,
        empty_7,
        keys_t_4_address0,
        keys_t_4_ce0,
        keys_t_4_q0,
        empty_8,
        keys_t_5_address0,
        keys_t_5_ce0,
        keys_t_5_q0,
        empty_9,
        keys_t_6_address0,
        keys_t_6_ce0,
        keys_t_6_q0,
        empty_10,
        keys_t_7_address0,
        keys_t_7_ce0,
        keys_t_7_q0,
        empty,
        m,
        score_m_1_address0,
        score_m_1_ce0,
        score_m_1_we0,
        score_m_1_d0,
        score_m_2_address0,
        score_m_2_ce0,
        score_m_2_we0,
        score_m_2_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] score_m_0_address0;
output   score_m_0_ce0;
output   score_m_0_we0;
output  [31:0] score_m_0_d0;
output  [1:0] keys_t_0_address0;
output   keys_t_0_ce0;
input  [31:0] keys_t_0_q0;
input  [31:0] empty_4;
output  [1:0] keys_t_1_address0;
output   keys_t_1_ce0;
input  [31:0] keys_t_1_q0;
input  [31:0] empty_5;
output  [1:0] keys_t_2_address0;
output   keys_t_2_ce0;
input  [31:0] keys_t_2_q0;
input  [31:0] empty_6;
output  [1:0] keys_t_3_address0;
output   keys_t_3_ce0;
input  [31:0] keys_t_3_q0;
input  [31:0] empty_7;
output  [1:0] keys_t_4_address0;
output   keys_t_4_ce0;
input  [31:0] keys_t_4_q0;
input  [31:0] empty_8;
output  [1:0] keys_t_5_address0;
output   keys_t_5_ce0;
input  [31:0] keys_t_5_q0;
input  [31:0] empty_9;
output  [1:0] keys_t_6_address0;
output   keys_t_6_ce0;
input  [31:0] keys_t_6_q0;
input  [31:0] empty_10;
output  [1:0] keys_t_7_address0;
output   keys_t_7_ce0;
input  [31:0] keys_t_7_q0;
input  [31:0] empty;
input  [1:0] m;
output  [1:0] score_m_1_address0;
output   score_m_1_ce0;
output   score_m_1_we0;
output  [31:0] score_m_1_d0;
output  [1:0] score_m_2_address0;
output   score_m_2_ce0;
output   score_m_2_we0;
output  [31:0] score_m_2_d0;

reg ap_idle;
reg score_m_0_ce0;
reg score_m_0_we0;
reg keys_t_0_ce0;
reg keys_t_1_ce0;
reg keys_t_2_ce0;
reg keys_t_3_ce0;
reg keys_t_4_ce0;
reg keys_t_5_ce0;
reg keys_t_6_ce0;
reg keys_t_7_ce0;
reg score_m_1_ce0;
reg score_m_1_we0;
reg score_m_2_ce0;
reg score_m_2_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
wire    ap_block_state22_pp0_stage0_iter21;
wire    ap_block_state23_pp0_stage0_iter22;
wire    ap_block_state24_pp0_stage0_iter23;
wire    ap_block_state25_pp0_stage0_iter24;
wire    ap_block_state26_pp0_stage0_iter25;
wire    ap_block_state27_pp0_stage0_iter26;
wire    ap_block_state28_pp0_stage0_iter27;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln14_fu_350_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [1:0] m_read_reg_431;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln14_fu_362_p1;
reg   [63:0] zext_ln14_reg_479;
reg   [63:0] zext_ln14_reg_479_pp0_iter1_reg;
reg   [63:0] zext_ln14_reg_479_pp0_iter2_reg;
reg   [63:0] zext_ln14_reg_479_pp0_iter3_reg;
reg   [63:0] zext_ln14_reg_479_pp0_iter4_reg;
reg   [63:0] zext_ln14_reg_479_pp0_iter5_reg;
reg   [63:0] zext_ln14_reg_479_pp0_iter6_reg;
reg   [63:0] zext_ln14_reg_479_pp0_iter7_reg;
reg   [63:0] zext_ln14_reg_479_pp0_iter8_reg;
reg   [63:0] zext_ln14_reg_479_pp0_iter9_reg;
reg   [63:0] zext_ln14_reg_479_pp0_iter10_reg;
reg   [63:0] zext_ln14_reg_479_pp0_iter11_reg;
reg   [63:0] zext_ln14_reg_479_pp0_iter12_reg;
reg   [63:0] zext_ln14_reg_479_pp0_iter13_reg;
reg   [63:0] zext_ln14_reg_479_pp0_iter14_reg;
reg   [63:0] zext_ln14_reg_479_pp0_iter15_reg;
reg   [63:0] zext_ln14_reg_479_pp0_iter16_reg;
reg   [63:0] zext_ln14_reg_479_pp0_iter17_reg;
reg   [63:0] zext_ln14_reg_479_pp0_iter18_reg;
reg   [63:0] zext_ln14_reg_479_pp0_iter19_reg;
reg   [63:0] zext_ln14_reg_479_pp0_iter20_reg;
reg   [63:0] zext_ln14_reg_479_pp0_iter21_reg;
reg   [63:0] zext_ln14_reg_479_pp0_iter22_reg;
reg   [63:0] zext_ln14_reg_479_pp0_iter23_reg;
reg   [63:0] zext_ln14_reg_479_pp0_iter24_reg;
reg   [63:0] zext_ln14_reg_479_pp0_iter25_reg;
reg   [63:0] zext_ln14_reg_479_pp0_iter26_reg;
wire   [31:0] grp_fu_310_p2;
reg   [31:0] mul_reg_503;
wire   [31:0] grp_fu_277_p2;
reg   [31:0] add_reg_518;
wire   [31:0] grp_fu_314_p2;
reg   [31:0] mul_1_reg_523;
wire   [31:0] grp_fu_282_p2;
reg   [31:0] add_1_reg_538;
wire   [31:0] grp_fu_318_p2;
reg   [31:0] mul_2_reg_543;
wire   [31:0] grp_fu_286_p2;
reg   [31:0] add_2_reg_558;
wire   [31:0] grp_fu_322_p2;
reg   [31:0] mul_3_reg_563;
wire   [31:0] grp_fu_290_p2;
reg   [31:0] add_3_reg_578;
wire   [31:0] grp_fu_326_p2;
reg   [31:0] mul_4_reg_583;
wire   [31:0] grp_fu_294_p2;
reg   [31:0] add_4_reg_598;
wire   [31:0] grp_fu_330_p2;
reg   [31:0] mul_5_reg_603;
wire   [31:0] grp_fu_298_p2;
reg   [31:0] add_5_reg_618;
wire   [31:0] grp_fu_334_p2;
reg   [31:0] mul_6_reg_623;
wire   [31:0] grp_fu_302_p2;
reg   [31:0] add_6_reg_638;
wire   [31:0] grp_fu_338_p2;
reg   [31:0] mul_7_reg_643;
wire   [31:0] grp_fu_306_p2;
reg   [31:0] add_7_reg_648;
wire    ap_block_pp0_stage0;
reg   [1:0] o_fu_76;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_o_1;
wire   [1:0] add_ln14_fu_356_p2;
wire   [31:0] grp_fu_310_p1;
wire   [31:0] grp_fu_314_p1;
wire   [31:0] grp_fu_318_p1;
wire   [31:0] grp_fu_322_p1;
wire   [31:0] grp_fu_326_p1;
wire   [31:0] grp_fu_330_p1;
wire   [31:0] grp_fu_334_p1;
wire   [31:0] grp_fu_338_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg    ap_loop_exit_ready_pp0_iter21_reg;
reg    ap_loop_exit_ready_pp0_iter22_reg;
reg    ap_loop_exit_ready_pp0_iter23_reg;
reg    ap_loop_exit_ready_pp0_iter24_reg;
reg    ap_loop_exit_ready_pp0_iter25_reg;
reg    ap_loop_exit_ready_pp0_iter26_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_done_reg = 1'b0;
end

score_matrix_fadd_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_3_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_reg_503),
    .din1(32'd0),
    .ce(1'b1),
    .dout(grp_fu_277_p2)
);

score_matrix_fadd_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_3_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_reg_518),
    .din1(mul_1_reg_523),
    .ce(1'b1),
    .dout(grp_fu_282_p2)
);

score_matrix_fadd_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_3_full_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_1_reg_538),
    .din1(mul_2_reg_543),
    .ce(1'b1),
    .dout(grp_fu_286_p2)
);

score_matrix_fadd_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_3_full_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_2_reg_558),
    .din1(mul_3_reg_563),
    .ce(1'b1),
    .dout(grp_fu_290_p2)
);

score_matrix_fadd_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_3_full_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_3_reg_578),
    .din1(mul_4_reg_583),
    .ce(1'b1),
    .dout(grp_fu_294_p2)
);

score_matrix_fadd_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_3_full_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_4_reg_598),
    .din1(mul_5_reg_603),
    .ce(1'b1),
    .dout(grp_fu_298_p2)
);

score_matrix_fadd_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_3_full_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_5_reg_618),
    .din1(mul_6_reg_623),
    .ce(1'b1),
    .dout(grp_fu_302_p2)
);

score_matrix_fadd_32ns_32ns_32_3_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_3_full_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_6_reg_638),
    .din1(mul_7_reg_643),
    .ce(1'b1),
    .dout(grp_fu_306_p2)
);

score_matrix_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_4),
    .din1(grp_fu_310_p1),
    .ce(1'b1),
    .dout(grp_fu_310_p2)
);

score_matrix_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_5),
    .din1(grp_fu_314_p1),
    .ce(1'b1),
    .dout(grp_fu_314_p2)
);

score_matrix_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_6),
    .din1(grp_fu_318_p1),
    .ce(1'b1),
    .dout(grp_fu_318_p2)
);

score_matrix_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_7),
    .din1(grp_fu_322_p1),
    .ce(1'b1),
    .dout(grp_fu_322_p2)
);

score_matrix_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_8),
    .din1(grp_fu_326_p1),
    .ce(1'b1),
    .dout(grp_fu_326_p2)
);

score_matrix_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_9),
    .din1(grp_fu_330_p1),
    .ce(1'b1),
    .dout(grp_fu_330_p2)
);

score_matrix_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_10),
    .din1(grp_fu_334_p1),
    .ce(1'b1),
    .dout(grp_fu_334_p2)
);

score_matrix_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty),
    .din1(grp_fu_338_p1),
    .ce(1'b1),
    .dout(grp_fu_338_p2)
);

score_matrix_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter26_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln14_fu_350_p2 == 1'd0))) begin
            o_fu_76 <= add_ln14_fu_356_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            o_fu_76 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_1_reg_538 <= grp_fu_282_p2;
        add_2_reg_558 <= grp_fu_286_p2;
        add_3_reg_578 <= grp_fu_290_p2;
        add_4_reg_598 <= grp_fu_294_p2;
        add_5_reg_618 <= grp_fu_298_p2;
        add_6_reg_638 <= grp_fu_302_p2;
        add_7_reg_648 <= grp_fu_306_p2;
        add_reg_518 <= grp_fu_277_p2;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
        ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
        ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
        ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
        ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
        ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        mul_1_reg_523 <= grp_fu_314_p2;
        mul_2_reg_543 <= grp_fu_318_p2;
        mul_3_reg_563 <= grp_fu_322_p2;
        mul_4_reg_583 <= grp_fu_326_p2;
        mul_5_reg_603 <= grp_fu_330_p2;
        mul_6_reg_623 <= grp_fu_334_p2;
        mul_7_reg_643 <= grp_fu_338_p2;
        mul_reg_503 <= grp_fu_310_p2;
        zext_ln14_reg_479_pp0_iter10_reg[1 : 0] <= zext_ln14_reg_479_pp0_iter9_reg[1 : 0];
        zext_ln14_reg_479_pp0_iter11_reg[1 : 0] <= zext_ln14_reg_479_pp0_iter10_reg[1 : 0];
        zext_ln14_reg_479_pp0_iter12_reg[1 : 0] <= zext_ln14_reg_479_pp0_iter11_reg[1 : 0];
        zext_ln14_reg_479_pp0_iter13_reg[1 : 0] <= zext_ln14_reg_479_pp0_iter12_reg[1 : 0];
        zext_ln14_reg_479_pp0_iter14_reg[1 : 0] <= zext_ln14_reg_479_pp0_iter13_reg[1 : 0];
        zext_ln14_reg_479_pp0_iter15_reg[1 : 0] <= zext_ln14_reg_479_pp0_iter14_reg[1 : 0];
        zext_ln14_reg_479_pp0_iter16_reg[1 : 0] <= zext_ln14_reg_479_pp0_iter15_reg[1 : 0];
        zext_ln14_reg_479_pp0_iter17_reg[1 : 0] <= zext_ln14_reg_479_pp0_iter16_reg[1 : 0];
        zext_ln14_reg_479_pp0_iter18_reg[1 : 0] <= zext_ln14_reg_479_pp0_iter17_reg[1 : 0];
        zext_ln14_reg_479_pp0_iter19_reg[1 : 0] <= zext_ln14_reg_479_pp0_iter18_reg[1 : 0];
        zext_ln14_reg_479_pp0_iter20_reg[1 : 0] <= zext_ln14_reg_479_pp0_iter19_reg[1 : 0];
        zext_ln14_reg_479_pp0_iter21_reg[1 : 0] <= zext_ln14_reg_479_pp0_iter20_reg[1 : 0];
        zext_ln14_reg_479_pp0_iter22_reg[1 : 0] <= zext_ln14_reg_479_pp0_iter21_reg[1 : 0];
        zext_ln14_reg_479_pp0_iter23_reg[1 : 0] <= zext_ln14_reg_479_pp0_iter22_reg[1 : 0];
        zext_ln14_reg_479_pp0_iter24_reg[1 : 0] <= zext_ln14_reg_479_pp0_iter23_reg[1 : 0];
        zext_ln14_reg_479_pp0_iter25_reg[1 : 0] <= zext_ln14_reg_479_pp0_iter24_reg[1 : 0];
        zext_ln14_reg_479_pp0_iter26_reg[1 : 0] <= zext_ln14_reg_479_pp0_iter25_reg[1 : 0];
        zext_ln14_reg_479_pp0_iter2_reg[1 : 0] <= zext_ln14_reg_479_pp0_iter1_reg[1 : 0];
        zext_ln14_reg_479_pp0_iter3_reg[1 : 0] <= zext_ln14_reg_479_pp0_iter2_reg[1 : 0];
        zext_ln14_reg_479_pp0_iter4_reg[1 : 0] <= zext_ln14_reg_479_pp0_iter3_reg[1 : 0];
        zext_ln14_reg_479_pp0_iter5_reg[1 : 0] <= zext_ln14_reg_479_pp0_iter4_reg[1 : 0];
        zext_ln14_reg_479_pp0_iter6_reg[1 : 0] <= zext_ln14_reg_479_pp0_iter5_reg[1 : 0];
        zext_ln14_reg_479_pp0_iter7_reg[1 : 0] <= zext_ln14_reg_479_pp0_iter6_reg[1 : 0];
        zext_ln14_reg_479_pp0_iter8_reg[1 : 0] <= zext_ln14_reg_479_pp0_iter7_reg[1 : 0];
        zext_ln14_reg_479_pp0_iter9_reg[1 : 0] <= zext_ln14_reg_479_pp0_iter8_reg[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        zext_ln14_reg_479_pp0_iter1_reg[1 : 0] <= zext_ln14_reg_479[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln14_fu_350_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        zext_ln14_reg_479[1 : 0] <= zext_ln14_fu_362_p1[1 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln14_fu_350_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter26_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_idle_pp0 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_o_1 = 2'd0;
    end else begin
        ap_sig_allocacmp_o_1 = o_fu_76;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        keys_t_0_ce0 = 1'b1;
    end else begin
        keys_t_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        keys_t_1_ce0 = 1'b1;
    end else begin
        keys_t_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        keys_t_2_ce0 = 1'b1;
    end else begin
        keys_t_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        keys_t_3_ce0 = 1'b1;
    end else begin
        keys_t_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        keys_t_4_ce0 = 1'b1;
    end else begin
        keys_t_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        keys_t_5_ce0 = 1'b1;
    end else begin
        keys_t_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        keys_t_6_ce0 = 1'b1;
    end else begin
        keys_t_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter21 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        keys_t_7_ce0 = 1'b1;
    end else begin
        keys_t_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter27 == 1'b1))) begin
        score_m_0_ce0 = 1'b1;
    end else begin
        score_m_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_read_reg_431 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter27 == 1'b1))) begin
        score_m_0_we0 = 1'b1;
    end else begin
        score_m_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter27 == 1'b1))) begin
        score_m_1_ce0 = 1'b1;
    end else begin
        score_m_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_read_reg_431 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter27 == 1'b1))) begin
        score_m_1_we0 = 1'b1;
    end else begin
        score_m_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter27 == 1'b1))) begin
        score_m_2_ce0 = 1'b1;
    end else begin
        score_m_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(m_read_reg_431 == 2'd0) & ~(m_read_reg_431 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter27 == 1'b1))) begin
        score_m_2_we0 = 1'b1;
    end else begin
        score_m_2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_fu_356_p2 = (ap_sig_allocacmp_o_1 + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_310_p1 = keys_t_0_q0;

assign grp_fu_314_p1 = keys_t_1_q0;

assign grp_fu_318_p1 = keys_t_2_q0;

assign grp_fu_322_p1 = keys_t_3_q0;

assign grp_fu_326_p1 = keys_t_4_q0;

assign grp_fu_330_p1 = keys_t_5_q0;

assign grp_fu_334_p1 = keys_t_6_q0;

assign grp_fu_338_p1 = keys_t_7_q0;

assign icmp_ln14_fu_350_p2 = ((ap_sig_allocacmp_o_1 == 2'd3) ? 1'b1 : 1'b0);

assign keys_t_0_address0 = zext_ln14_fu_362_p1;

assign keys_t_1_address0 = zext_ln14_reg_479_pp0_iter2_reg;

assign keys_t_2_address0 = zext_ln14_reg_479_pp0_iter5_reg;

assign keys_t_3_address0 = zext_ln14_reg_479_pp0_iter8_reg;

assign keys_t_4_address0 = zext_ln14_reg_479_pp0_iter11_reg;

assign keys_t_5_address0 = zext_ln14_reg_479_pp0_iter14_reg;

assign keys_t_6_address0 = zext_ln14_reg_479_pp0_iter17_reg;

assign keys_t_7_address0 = zext_ln14_reg_479_pp0_iter20_reg;

assign m_read_reg_431 = m;

assign score_m_0_address0 = zext_ln14_reg_479_pp0_iter26_reg;

assign score_m_0_d0 = add_7_reg_648;

assign score_m_1_address0 = zext_ln14_reg_479_pp0_iter26_reg;

assign score_m_1_d0 = add_7_reg_648;

assign score_m_2_address0 = zext_ln14_reg_479_pp0_iter26_reg;

assign score_m_2_d0 = add_7_reg_648;

assign zext_ln14_fu_362_p1 = ap_sig_allocacmp_o_1;

always @ (posedge ap_clk) begin
    zext_ln14_reg_479[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_479_pp0_iter1_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_479_pp0_iter2_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_479_pp0_iter3_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_479_pp0_iter4_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_479_pp0_iter5_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_479_pp0_iter6_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_479_pp0_iter7_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_479_pp0_iter8_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_479_pp0_iter9_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_479_pp0_iter10_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_479_pp0_iter11_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_479_pp0_iter12_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_479_pp0_iter13_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_479_pp0_iter14_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_479_pp0_iter15_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_479_pp0_iter16_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_479_pp0_iter17_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_479_pp0_iter18_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_479_pp0_iter19_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_479_pp0_iter20_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_479_pp0_iter21_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_479_pp0_iter22_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_479_pp0_iter23_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_479_pp0_iter24_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_479_pp0_iter25_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_479_pp0_iter26_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
end

endmodule //score_matrix_score_matrix_Pipeline_LOOP2
