-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity score_matrix_score_matrix_Pipeline_LOOP2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    score_m_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    score_m_0_ce0 : OUT STD_LOGIC;
    score_m_0_we0 : OUT STD_LOGIC;
    score_m_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    keys_t_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    keys_t_0_ce0 : OUT STD_LOGIC;
    keys_t_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    keys_t_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    keys_t_1_ce0 : OUT STD_LOGIC;
    keys_t_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    keys_t_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    keys_t_2_ce0 : OUT STD_LOGIC;
    keys_t_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty : IN STD_LOGIC_VECTOR (31 downto 0);
    m : IN STD_LOGIC_VECTOR (1 downto 0);
    score_m_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    score_m_1_ce0 : OUT STD_LOGIC;
    score_m_1_we0 : OUT STD_LOGIC;
    score_m_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    score_m_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    score_m_2_ce0 : OUT STD_LOGIC;
    score_m_2_we0 : OUT STD_LOGIC;
    score_m_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of score_matrix_score_matrix_Pipeline_LOOP2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln12_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal m_read_reg_251 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln12_fu_207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_274 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_274_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_274_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_274_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_274_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_274_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_274_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_274_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_274_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_274_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_274_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_274_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_162_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_179_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_reg_313 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_167_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_1_reg_328 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_183_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_2_reg_333 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_171_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_2_reg_338 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal o_fu_56 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_o_1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln12_fu_201_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_175_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_179_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_183_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component score_matrix_fadd_32ns_32ns_32_3_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component score_matrix_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component score_matrix_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fadd_32ns_32ns_32_3_full_dsp_1_U1 : component score_matrix_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_reg_293,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_162_p2);

    fadd_32ns_32ns_32_3_full_dsp_1_U2 : component score_matrix_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_reg_308,
        din1 => mul_1_reg_313,
        ce => ap_const_logic_1,
        dout => grp_fu_167_p2);

    fadd_32ns_32ns_32_3_full_dsp_1_U3 : component score_matrix_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_1_reg_328,
        din1 => mul_2_reg_333,
        ce => ap_const_logic_1,
        dout => grp_fu_171_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U4 : component score_matrix_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_4,
        din1 => grp_fu_175_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_175_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U5 : component score_matrix_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_5,
        din1 => grp_fu_179_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_179_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U6 : component score_matrix_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty,
        din1 => grp_fu_183_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_183_p2);

    flow_control_loop_pipe_sequential_init_U : component score_matrix_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    o_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln12_fu_195_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    o_fu_56 <= add_ln12_fu_201_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    o_fu_56 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_1_reg_328 <= grp_fu_167_p2;
                add_2_reg_338 <= grp_fu_171_p2;
                add_reg_308 <= grp_fu_162_p2;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                mul_1_reg_313 <= grp_fu_179_p2;
                mul_2_reg_333 <= grp_fu_183_p2;
                mul_reg_293 <= grp_fu_175_p2;
                    zext_ln12_reg_274_pp0_iter10_reg(1 downto 0) <= zext_ln12_reg_274_pp0_iter9_reg(1 downto 0);
                    zext_ln12_reg_274_pp0_iter11_reg(1 downto 0) <= zext_ln12_reg_274_pp0_iter10_reg(1 downto 0);
                    zext_ln12_reg_274_pp0_iter2_reg(1 downto 0) <= zext_ln12_reg_274_pp0_iter1_reg(1 downto 0);
                    zext_ln12_reg_274_pp0_iter3_reg(1 downto 0) <= zext_ln12_reg_274_pp0_iter2_reg(1 downto 0);
                    zext_ln12_reg_274_pp0_iter4_reg(1 downto 0) <= zext_ln12_reg_274_pp0_iter3_reg(1 downto 0);
                    zext_ln12_reg_274_pp0_iter5_reg(1 downto 0) <= zext_ln12_reg_274_pp0_iter4_reg(1 downto 0);
                    zext_ln12_reg_274_pp0_iter6_reg(1 downto 0) <= zext_ln12_reg_274_pp0_iter5_reg(1 downto 0);
                    zext_ln12_reg_274_pp0_iter7_reg(1 downto 0) <= zext_ln12_reg_274_pp0_iter6_reg(1 downto 0);
                    zext_ln12_reg_274_pp0_iter8_reg(1 downto 0) <= zext_ln12_reg_274_pp0_iter7_reg(1 downto 0);
                    zext_ln12_reg_274_pp0_iter9_reg(1 downto 0) <= zext_ln12_reg_274_pp0_iter8_reg(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                    zext_ln12_reg_274_pp0_iter1_reg(1 downto 0) <= zext_ln12_reg_274(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_195_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln12_reg_274(1 downto 0) <= zext_ln12_fu_207_p1(1 downto 0);
            end if;
        end if;
    end process;
    zext_ln12_reg_274(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    zext_ln12_reg_274_pp0_iter1_reg(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    zext_ln12_reg_274_pp0_iter2_reg(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    zext_ln12_reg_274_pp0_iter3_reg(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    zext_ln12_reg_274_pp0_iter4_reg(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    zext_ln12_reg_274_pp0_iter5_reg(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    zext_ln12_reg_274_pp0_iter6_reg(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    zext_ln12_reg_274_pp0_iter7_reg(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    zext_ln12_reg_274_pp0_iter8_reg(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    zext_ln12_reg_274_pp0_iter9_reg(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    zext_ln12_reg_274_pp0_iter10_reg(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    zext_ln12_reg_274_pp0_iter11_reg(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln12_fu_201_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_o_1) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln12_fu_195_p2)
    begin
        if (((icmp_ln12_fu_195_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter11_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_o_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, o_fu_56, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_o_1 <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_o_1 <= o_fu_56;
        end if; 
    end process;

    grp_fu_175_p1 <= keys_t_0_q0;
    grp_fu_179_p1 <= keys_t_1_q0;
    grp_fu_183_p1 <= keys_t_2_q0;
    icmp_ln12_fu_195_p2 <= "1" when (ap_sig_allocacmp_o_1 = ap_const_lv2_3) else "0";
    keys_t_0_address0 <= zext_ln12_fu_207_p1(2 - 1 downto 0);

    keys_t_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            keys_t_0_ce0 <= ap_const_logic_1;
        else 
            keys_t_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    keys_t_1_address0 <= zext_ln12_reg_274_pp0_iter2_reg(2 - 1 downto 0);

    keys_t_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            keys_t_1_ce0 <= ap_const_logic_1;
        else 
            keys_t_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    keys_t_2_address0 <= zext_ln12_reg_274_pp0_iter5_reg(2 - 1 downto 0);

    keys_t_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            keys_t_2_ce0 <= ap_const_logic_1;
        else 
            keys_t_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_read_reg_251 <= m;
    score_m_0_address0 <= zext_ln12_reg_274_pp0_iter11_reg(2 - 1 downto 0);

    score_m_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            score_m_0_ce0 <= ap_const_logic_1;
        else 
            score_m_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    score_m_0_d0 <= add_2_reg_338;

    score_m_0_we0_assign_proc : process(ap_enable_reg_pp0_iter12, m_read_reg_251, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (m_read_reg_251 = ap_const_lv2_0))) then 
            score_m_0_we0 <= ap_const_logic_1;
        else 
            score_m_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    score_m_1_address0 <= zext_ln12_reg_274_pp0_iter11_reg(2 - 1 downto 0);

    score_m_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            score_m_1_ce0 <= ap_const_logic_1;
        else 
            score_m_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    score_m_1_d0 <= add_2_reg_338;

    score_m_1_we0_assign_proc : process(ap_enable_reg_pp0_iter12, m_read_reg_251, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (m_read_reg_251 = ap_const_lv2_1))) then 
            score_m_1_we0 <= ap_const_logic_1;
        else 
            score_m_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    score_m_2_address0 <= zext_ln12_reg_274_pp0_iter11_reg(2 - 1 downto 0);

    score_m_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            score_m_2_ce0 <= ap_const_logic_1;
        else 
            score_m_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    score_m_2_d0 <= add_2_reg_338;

    score_m_2_we0_assign_proc : process(ap_enable_reg_pp0_iter12, m_read_reg_251, ap_block_pp0_stage0_11001)
    begin
        if ((not((m_read_reg_251 = ap_const_lv2_0)) and not((m_read_reg_251 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            score_m_2_we0 <= ap_const_logic_1;
        else 
            score_m_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln12_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_o_1),64));
end behav;
